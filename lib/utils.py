import config
import spotipy
from rich.console import Console

console = Console()
console.clear()

def get_URI(query: str, sp: spotipy.Spotify, query_type: str) -> str:

    """Get the URI of a track or artist from a query."""

    result = sp.search(query, limit=1, type=query_type)
    # Appending "s" since the dictionary key is basically query_type+"s". e.g.: artist - artists
    try:
        uri = result[query_type + "s"]["items"][0]["uri"]
        url = result[query_type + "s"]["items"][0]["external_urls"]["spotify"]

    except IndexError:
        print("No results found.")
        return None, None

    return uri, url


def get_URI_interactive(query_type: str, sp) -> str:
    console.print(
        "How many {} do you want to enter?: ".format(query_type + "s"),
        style="bold blue",
        end="",
    )
    n = int(console.input())
    ls = []

    for _ in range(n):
        query_str = console.input("Enter a {}: ".format(query_type))
        uri, url = get_URI(query_str, sp, query_type)
        console.print(f"Track URI: [blue]{uri}[/blue]")
        console.print(f"Track URL: [blue]{url}[/blue]")
        console.print(
            f"Is this the correct {query_type}? [y/n]: ", style="bold red", end=""
        )
        flag = console.input()
        if flag.lower() == "n":
            console.print()
            continue
        else:
            ls.append(uri)
            console.print()

    return ls


def get_seed(sp: spotipy.Spotify) -> dict:
    seed = {"tracks": [], "artists": [], "limit": 10}

    track_uris = get_URI_interactive("track", sp)
    artist_uris = get_URI_interactive("artist", sp)

    # genres = console.input().split(",")
    # genre_seeds = sp.recommendation_genre_seeds()["genres"]
    # genres = [genre.strip() for genre in genres if genre.strip() in genre_seeds]

    console.print(
        "Enter the number of recommendations to generate: ",
        style="bold blue",
        end="",
    )
    limit = int(console.input())
    seed["limit"] = limit

    seed["tracks"].extend(track_uris)
    seed["artists"].extend(artist_uris)

    # track_name = console.input("Enter a track with artist name: ")
    # artist_name = console.input("Enter an artist ID: ")

    return seed


def get_recommendations(sp: spotipy.Spotify, seed: dict) -> list:
    results = sp.recommendations(
        seed_tracks=seed["tracks"],
        seed_artists=seed["artists"],
        limit=int(seed["limit"]),
    )
    ls = [
        (
            ", ".join([artist["name"] for artist in item["artists"]])
            + " - "
            + item["name"],
            item["uri"],
            item["external_urls"]["spotify"],
            item["preview_url"],
        )
        for item in results["tracks"]
    ]

    return ls
    

### Playlist Utils

def generate_playlist(recommendations: list, sp: spotipy.Spotify) -> None:

    # USER_ID = console.input("Enter your Spotify user ID: ")
    PLAYLIST_NAME = console.input("Enter the name of the playlist: ")

    # sp.user_playlist_create(USER_ID, PLAYLIST_NAME, public=False)
    playlist = sp.user_playlist_create(
        user=config.SPOTIFY_USER_ID,
        name=PLAYLIST_NAME,
        public=True,
        description="Generated by Spotify Playlist Generator!",
    )

    playlist_id = playlist["id"]

    return playlist_id


def add_to_playlist(
    playlist_id: str, recommendations: list, sp: spotipy.Spotify
) -> None:
    uris = [item[1] for item in recommendations]
    sp.playlist_add_items(playlist_id, uris)

    console.print("Playlist generated successfully!", style="bold green")

    playlist_url = sp.playlist(playlist_id)["external_urls"]["spotify"]

    return playlist_url